#!/bin/sh

COREFILES=('Source/Core/Core.js' 'dist/mootools-core-compat.js' 'dist/mootools-core-compat.min.js' 'dist/mootools-core.js' 'dist/mootools-core.min.js')
JSONFILES=('package.json' 'bower.json')
TAGLENGTH=3

DIR=`dirname "$0"`
for file in "${COREFILES[@]}"; do echo "$file=$DIR/$file" | sh >/dev/null 2>&1; done
for file in "${JSONFILES[@]}"; do echo "$file=$DIR/$file" | sh >/dev/null 2>&1; done
TARGET_FILES=( "${COREFILES[@]}" "${JSONFILES[@]}" )
TARGET_FILES_STRING=`IFS=$' '; echo "${TARGET_FILES[*]}"`
TAG=`echo "$1" | cut -d'.' -f-$TAGLENGTH`
SUFFIX="`echo "$2" | tr '[A-Z]' '[a-z]'`"
BUILD=`sh -c "cd '$DIR' && git rev-parse HEAD"`
CUTLENGTH=`echo "$TAGLENGTH - 1" | bc`

moo(){
	echo -e "$1" >&2
	exit 1
}

get_suffixnumber(){
	NUMBER=`echo "$1" | sed 's/^[a-z]*[ 	]*\([0-9]*\).*/\1/'`
	[ -n "$NUMBER" ] && echo "$NUMBER" || echo "1"
}

[ -z "$1" -o "$1" == '-h' -o "$1" == '--help' ] && moo "Usage: $0 <tag> [suffix]\n\n  suffix: alpha, beta or rc*"
[ -z "$BUILD" ] && moo 'Unable to determine build.'

until [ -n "`echo "$TAG." | cut -d'.' -f$TAGLENGTH`" ]; do
	TAG="$TAG.0"
done

case "$SUFFIX" in
	'') RELEASE=''; SUFFIX='';;
	a*) NUMBER="`get_suffixnumber $SUFFIX`"; RELEASE=" Alpha $NUMBER"; SUFFIX="-a$NUMBER";;
	b*) NUMBER="`get_suffixnumber $SUFFIX`"; RELEASE=" Beta $NUMBER"; SUFFIX="-b$NUMBER";;
	rc*) NUMBER="`get_suffixnumber $SUFFIX`"; RELEASE=" Release Candidate $NUMBER"; SUFFIX="-rc$NUMBER";;
	*) moo 'Invalid suffix specified.';;
esac

if [ ! -d "$DIR/dist" ]; then
  moo '"./dist" directory not found. Please run "grunt distBuild" first.'
fi

if [ "$TAG" != "$1" ]; then
	echo -n "Did you mean $TAG$SUFFIX? (y/n): "
	read FIXTAG
	[ "$FIXTAG" = "y" ] || moo "Invalid tag specified, this project's tags consist of $TAGLENGTH parts."
fi

sh -c "cd '$DIR' && git show-ref --quiet --tags '$TAG$SUFFIX'" && moo "Tag $TAG$SUFFIX already exists."

if [ -z "$SUFFIX" ]; then
	MINOR=`echo "$TAG" | cut -d'.' -f$TAGLENGTH-`
	[ -z "$MINOR" ] && MINOR='0'
	NEXTTAG="`echo "$TAG" | cut -d'.' -f-$CUTLENGTH`.`echo "$MINOR + 1" | bc`-dev"
else
	NEXTTAG="${TAG}-dev"
fi

for FILE in "${COREFILES[@]}" "${JSONFILES[0]}"; do
	sed -i".$BUILD" -e "s/\(version:[ 	]*\)[\"'][0-9.]*-dev[\"']/\1'$TAG$SUFFIX'/" -e "s/\(build:[ 	]*\)[\"']%build%[\"']/\1'$BUILD'/" "$FILE" || moo "Error setting version and/or build for $TAG$SUFFIX in $FILE."
done
sed -i".$BUILD" -e "s/^\([ 	]*\"version\":[ 	]*\)\"[0-9.]*-dev\"/\1\"$TAG$SUFFIX\"/" "${JSONFILES[0]}" || moo "Error setting version for $TAG$SUFFIX in ${JSONFILES[0]}."
sed -i".$BUILD" -e "s/^\([ 	]*\"version\":[ 	]*\)\"[0-9.]*\"/\1\"$TAG\"/" "${JSONFILES[1]}" || moo "Error, setting version for $TAG in ${JSONFILES[1]}."
sh -c "cd $DIR && git add $TARGET_FILES_STRING && git commit -qm 'Welcome $TAG$SUFFIX.'" || moo "Error committing $TAG$SUFFIX."
sh -c "cd $DIR && git tag -am '$TAG$RELEASE.' '$TAG$SUFFIX'" || moo "Error tagging $TAG$SUFFIX."
echo "Tagged $TAG$SUFFIX." >&2

mv "${COREFILES[0]}.$BUILD" "$COREFILES" || moo "Error reverting version and build in ${COREFILES[0]}."
mv "${JSONFILES[0]}.$BUILD" "${JSONFILES[0]}" || moo "Error reverting version in ${JSONFILES[0]}."
sh -c "rm -r $DIR/dist && git add -u $DIR/dist" || moo "Error deleting dist folder"
sed -i".$BUILD" -e "s/\(version:[ 	]*\)'[0-9.]*-dev'/\1'$NEXTTAG'/" "${COREFILES[0]}" || moo "Error setting version $NEXTTAG in ${COREFILES[0]}."
sed -i".$BUILD" -e "s/^\([ 	]*\"version\":[ 	]*\)\"[0-9.]*-dev\"/\1\"$NEXTTAG\"/" "${JSONFILES[0]}" || moo "Error setting version for $NEXTTAG in ${JSONFILES[0]}."
rm "${COREFILES[0]}.$BUILD" "${JSONFILES[0]}.$BUILD" "${JSONFILES[1]}.$BUILD" || moo "Error cleaning up ${COREFILES[0]}.$BUILD and/or ${JSONFILES[0]}.$BUILD, ${JSONFILES[1]}.$BUILD"
sh -c "cd $DIR && git add '${COREFILES[0]}' '${JSONFILES[0]}' && git commit -qm 'Hello $NEXTTAG.'" || moo "Error committing $NEXTTAG."
echo "Committed $NEXTTAG." >&2
